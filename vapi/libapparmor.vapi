/* libapparmor.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "aa_", gir_namespace = "AppArmor", lower_case_cprefix = "aa__")]
namespace AppArmor {
	[CCode (cheader_filename = "sys/apparmor.h", has_type_id = false)]
	[Compact]
	public class features {
		[CCode (cname = "aa_features_id")]
		public string id ();
		[CCode (cname = "aa_features_is_equal")]
		public bool is_equal (AppArmor.features features2);
		[CCode (cname = "aa_features_supports")]
		public bool supports (string str);
		[CCode (cname = "aa_features_unref")]
		public void unref ();
		[CCode (cname = "aa_features_value")]
		public string value (string str, size_t len);
		[CCode (cname = "aa_features_write_to_fd")]
		public int write_to_fd (int fd);
		[CCode (cname = "aa_features_write_to_file")]
		public int write_to_file (int dirfd, string path);
	}
	[CCode (cheader_filename = "sys/apparmor.h", has_type_id = false)]
	[Compact]
	public class kernel_interface {
		[CCode (cname = "aa_kernel_interface_load_policy")]
		public int load_policy (string buffer, size_t size);
		[CCode (cname = "aa_kernel_interface_load_policy_from_fd")]
		public int load_policy_from_fd (int fd);
		[CCode (cname = "aa_kernel_interface_load_policy_from_file")]
		public int load_policy_from_file (int dirfd, string path);
		[CCode (cname = "aa_kernel_interface_remove_policy")]
		public int remove_policy (string fqname);
		[CCode (cname = "aa_kernel_interface_replace_policy")]
		public int replace_policy (string buffer, size_t size);
		[CCode (cname = "aa_kernel_interface_replace_policy_from_fd")]
		public int replace_policy_from_fd (int fd);
		[CCode (cname = "aa_kernel_interface_replace_policy_from_file")]
		public int replace_policy_from_file (int dirfd, string path);
		[CCode (cname = "aa_kernel_interface_unref")]
		public void unref ();
	}
	[CCode (cheader_filename = "sys/apparmor.h", has_type_id = false)]
	[Compact]
	public class policy_cache {
		[CCode (cname = "aa_policy_cache_add_ro_dir")]
		public int add_ro_dir (int dirfd, string path);
		[CCode (cname = "aa_policy_cache_dir_path")]
		public string dir_path (int n);
		[CCode (cname = "aa_policy_cache_dirfd")]
		public int dirfd (int dir);
		[CCode (cname = "aa_policy_cache_filename")]
		public string filename (string name);
		[CCode (cname = "aa_policy_cache_no_dirs")]
		public int no_dirs ();
		[CCode (cname = "aa_policy_cache_open")]
		public int open (string name, int flags);
		[CCode (cname = "aa_policy_cache_replace_all")]
		public int replace_all (AppArmor.kernel_interface kernel_interface);
		[CCode (cname = "aa_policy_cache_unref")]
		public void unref ();
	}
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_CLASS_DBUS")]
	public const int CLASS_DBUS;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_CLASS_FILE")]
	public const int CLASS_FILE;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_DBUS_BIND")]
	public const int DBUS_BIND;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_DBUS_EAVESDROP")]
	public const int DBUS_EAVESDROP;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_DBUS_RECEIVE")]
	public const int DBUS_RECEIVE;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_DBUS_SEND")]
	public const int DBUS_SEND;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_EXEC_MMAP")]
	public const int EXEC_MMAP;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_APPEND")]
	public const int MAY_APPEND;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_CHANGE_PROFILE")]
	public const int MAY_CHANGE_PROFILE;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_CHMOD")]
	public const int MAY_CHMOD;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_CHOWN")]
	public const int MAY_CHOWN;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_CREATE")]
	public const int MAY_CREATE;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_DELETE")]
	public const int MAY_DELETE;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_EXEC")]
	public const int MAY_EXEC;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_GETATTR")]
	public const int MAY_GETATTR;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_GETCRED")]
	public const int MAY_GETCRED;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_LINK")]
	public const int MAY_LINK;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_LOCK")]
	public const int MAY_LOCK;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_ONEXEC")]
	public const int MAY_ONEXEC;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_OPEN")]
	public const int MAY_OPEN;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_READ")]
	public const int MAY_READ;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_RENAME")]
	public const int MAY_RENAME;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_SETATTR")]
	public const int MAY_SETATTR;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_SETCRED")]
	public const int MAY_SETCRED;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_MAY_WRITE")]
	public const int MAY_WRITE;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_QUERY_CMD_LABEL")]
	public const string QUERY_CMD_LABEL;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "AA_VALID_DBUS_PERMS")]
	public const int VALID_DBUS_PERMS;
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_change_hat")]
	public static int change_hat (string subprofile, ulong magic_token);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_change_hatv")]
	public static int change_hatv (string subprofiles, ulong token);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_change_onexec")]
	public static int change_onexec (string profile);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_change_profile")]
	public static int change_profile (string profile);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_features_new")]
	public static int features_new (AppArmor.features features, int dirfd, string path);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_features_new_from_file")]
	public static int features_new_from_file (AppArmor.features features, int file);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_features_new_from_kernel")]
	public static int features_new_from_kernel (AppArmor.features features);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_features_new_from_string")]
	public static int features_new_from_string (AppArmor.features features, string string, size_t size);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_find_mountpoint")]
	public static int find_mountpoint (string mnt);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_getcon")]
	public static int getcon (string label, string mode);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_getpeercon")]
	public static int getpeercon (int fd, string label, string mode);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_getpeercon_raw")]
	public static int getpeercon_raw (int fd, string buf, int32 len, string mode);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_getprocattr")]
	public static int getprocattr (int tid, string attr, string label, string mode);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_getprocattr_raw")]
	public static int getprocattr_raw (int tid, string attr, string buf, int len, string mode);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_gettaskcon")]
	public static int gettaskcon (int target, string label, string mode);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_is_enabled")]
	public static int is_enabled ();
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_kernel_interface_new")]
	public static int kernel_interface_new (AppArmor.kernel_interface kernel_interface, AppArmor.features kernel_features, string apparmorfs);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_kernel_interface_write_policy")]
	public static int kernel_interface_write_policy (int fd, string buffer, size_t size);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_policy_cache_dir_path_preview")]
	public static string policy_cache_dir_path_preview (AppArmor.features kernel_features, int dirfd, string path);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_policy_cache_new")]
	public static int policy_cache_new (AppArmor.policy_cache policy_cache, AppArmor.features kernel_features, int dirfd, string path, uint16 max_caches);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_policy_cache_remove")]
	public static int policy_cache_remove (int dirfd, string path);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_query_file_path")]
	public static int query_file_path (uint32 mask, string label, string path, int allowed, int audited);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_query_file_path_len")]
	public static int query_file_path_len (uint32 mask, string label, size_t label_len, string path, size_t path_len, int allowed, int audited);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_query_label")]
	public static int query_label (uint32 mask, string query, size_t size, int allow, int audit);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_query_link_path")]
	public static int query_link_path (string label, string target, string link, int allowed, int audited);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_query_link_path_len")]
	public static int query_link_path_len (string label, size_t label_len, string target, size_t target_len, string link, size_t link_len, int allowed, int audited);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_splitcon")]
	public static string splitcon (string con, string mode);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_stack_onexec")]
	public static int stack_onexec (string profile);
	[CCode (cheader_filename = "sys/apparmor.h", cname = "aa_stack_profile")]
	public static int stack_profile (string profile);
}
